package com.example.yourvelociraptorflowers.domain.notification.weather;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build;
import android.preference.PreferenceManager;
import android.util.Log;

import androidx.core.app.NotificationCompat;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.example.yourvelociraptorflowers.R;
import com.example.yourvelociraptorflowers.model.notification.Notify;
import com.example.yourvelociraptorflowers.ui.MainActivity;
import com.google.firebase.firestore.FirebaseFirestore;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class WeatherNotificationManager {

    private static final String LAST_NOTIFICATION_KEY = "last_weather_notification_time";
    private static final String NOTIFICATION_CHANNEL_ID = "weather_channel";
    private static final String API_KEY = "5808f06df095f6182e6691286088842f";
    private RequestQueue requestQueue;
    private FirebaseFirestore firestore;
    private String userId;

    public WeatherNotificationManager(Context context, String userId) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RequestQueue –∏ Firestore
        requestQueue = Volley.newRequestQueue(context);
        firestore = FirebaseFirestore.getInstance();
        this.userId = userId;
    }

    public void showDailyWeatherNotification(Context context, String city) {
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
        long lastNotificationTime = preferences.getLong(LAST_NOTIFICATION_KEY, 0);
        Calendar calendar = Calendar.getInstance();
        int currentHour = calendar.get(Calendar.HOUR_OF_DAY);
        fetchWeatherData(context, city);

//        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ 12:00 –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è
//        if (currentHour >= 12 && !isSameDay(lastNotificationTime)) {
//
//            Log.wtf("LOGG", String.valueOf(!isSameDay(lastNotificationTime)));
//            preferences.edit().putLong(LAST_NOTIFICATION_KEY, System.currentTimeMillis()).apply();
//        }
    }

    public boolean isSameDay(long timeInMillis) {
        Calendar currentCalendar = Calendar.getInstance();
        Calendar lastNotificationCalendar = Calendar.getInstance();
        lastNotificationCalendar.setTimeInMillis(timeInMillis);

        return currentCalendar.get(Calendar.YEAR) == lastNotificationCalendar.get(Calendar.YEAR) &&
                currentCalendar.get(Calendar.DAY_OF_YEAR) == lastNotificationCalendar.get(Calendar.DAY_OF_YEAR);
    }

    public void fetchWeatherData(Context context, String city) {
        String urlCurrent = "https://api.openweathermap.org/data/2.5/weather?q=" + city + "&appid=" + API_KEY + "&lang=ru&units=metric";
        String urlForecast = "https://api.openweathermap.org/data/2.5/forecast?q=" + city + "&appid=" + API_KEY + "&lang=ru&units=metric";

        JsonObjectRequest jsonObjectRequestCurrent = new JsonObjectRequest(Request.Method.GET, urlCurrent, null,
                response -> {
                    try {
                        JSONObject main = response.getJSONObject("main");
                        double temperature = main.getDouble("temp");
                        getForecastAndNotify(context, city, temperature);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }, error -> {
            error.printStackTrace();
        });

        requestQueue.add(jsonObjectRequestCurrent);
    }

    public void getForecastAndNotify(Context context, String city, double currentTemperature) {
        String urlForecast = "https://api.openweathermap.org/data/2.5/forecast?q=" + city + "&appid=" + API_KEY + "&lang=ru&units=metric";

        JsonObjectRequest jsonObjectRequestForecast = new JsonObjectRequest(Request.Method.GET, urlForecast, null,
                response -> {
                    try {
                        JSONArray listArray = response.getJSONArray("list");
                        if (listArray.length() > 8) {
                            JSONObject list = listArray.getJSONObject(8); // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                            JSONObject main = list.getJSONObject("main");
                            double temperatureTomorrow = main.getDouble("temp");

                            JSONArray weatherArray = list.getJSONArray("weather");
                            if (weatherArray.length() > 0) {
                                String weatherDescription = weatherArray.getJSONObject(0).getString("description");

                                String advice = generateAdvice(weatherDescription, temperatureTomorrow);

                                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                String notificationText = "–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –æ–∫–Ω–æ–º: " + currentTemperature + "¬∞C üå°\n" +
                                        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: " + temperatureTomorrow + "¬∞C üå°\n" +
                                        "–°–æ–≤–µ—Ç –¥–Ω—è: " + advice;

                                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                showNotification(context, notificationText);

                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Firestore
                                saveNotificationToFirestore(notificationText);
                            } else {
                                Log.e("WeatherNotification", "Weather array is empty");
                            }
                        } else {
                            Log.e("WeatherNotification", "List array does not contain enough elements");
                        }
                    } catch (JSONException e) {
                        Log.e("WeatherNotification", "JSON parsing error", e);
                    }
                },
                error -> Log.e("WeatherNotification", "Volley error", error)
        );

        Volley.newRequestQueue(context).add(jsonObjectRequestForecast);
    }



    public void saveNotificationToFirestore(String notificationText) {
        Map<String, Object> newNotificationMap2 = new HashMap<>();
        long currentTime = System.currentTimeMillis();
        SimpleDateFormat sdf2 = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss", Locale.getDefault());

        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(currentTime);
        String currentTimeNormal = sdf2.format(calendar.getTime());
        Notify notification2 = new Notify("üòé –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã üòé", notificationText, currentTimeNormal);
        newNotificationMap2.put("notification", notification2);    // –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Firestore
        firestore.collection("users")
                .document(userId)
                .get()
                .addOnSuccessListener(documentSnapshot -> {
                    ArrayList<Map<String, Object>> notifications;
                    if (documentSnapshot.contains("notifications")) {
                        notifications = (ArrayList<Map<String, Object>>) documentSnapshot.get("notifications");
                    } else {
                        notifications = new ArrayList<>();
                    }
                    notifications.add(newNotificationMap2);
                    Map<String, Object> updateMap = new HashMap<>();
                    updateMap.put("notifications", notifications);
                    firestore.collection("users")
                            .document(userId)
                            .update(updateMap)
                            .addOnSuccessListener(unused -> {
                            })
                            .addOnFailureListener(e -> {
                                Log.e("NotificationWorker", "Error updating notifications", e);
                            });
                })
                .addOnFailureListener(e -> {
                    Log.e("NotificationWorker", "Error getting user notifications", e);
                });
        Map<String, Object> notification = new HashMap<>();
        notification.put("title", "üòé –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã üòé");
        notification.put("text", notificationText);
        notification.put("timestamp", System.currentTimeMillis());

        firestore.collection("users")
                .document(userId)
                .collection("notifications")
                .add(notification)
                .addOnSuccessListener(documentReference -> {
                    Log.wtf("LOGGING", "DocumentSnapshot added with ID: " + documentReference.getId());
                })
                .addOnFailureListener(e -> {
                    // –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                    e.printStackTrace();
                });
    }

    public String generateAdvice(String weatherDescription, double temperature) {
        String[] hotAdvice = {
                "–°–µ–≥–æ–¥–Ω—è –∂–∞—Ä–∫–æ. –†–∞—Å—Ç–µ–Ω–∏—è –º–æ–≥—É—Ç –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–µ—Å—Å –æ—Ç –∂–∞—Ä—ã, —É–≤–ª–∞–∂–Ω–∏—Ç–µ –∏—Ö –ø–æ—á–≤—É. ‚òÄÔ∏è",
                "–ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ —É–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ–ø—Ä—ã—Å–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π.üíß",
                "–ü–æ–¥—É–º–∞–π—Ç–µ –æ —Ç–µ–Ω–∏ –¥–ª—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –∂–∞—Ä–∫–∏–π –¥–µ–Ω—å. üåø",
                "–í—ã—Å–æ–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–µ—Ä–µ—Å—ã—Ö–∞–Ω–∏—é –ø–æ—á–≤—ã, —É–≤–ª–∞–∂–Ω—è–π—Ç–µ –µ–µ. üíß",
                "–ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä—è–º—ã—Ö —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ª—É—á–µ–π –Ω–∞ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö –≤–æ –≤—Ä–µ–º—è –∂–∞—Ä—ã. üåû"
        };

        String[] rainAdvice = {
                "–°–µ–≥–æ–¥–Ω—è –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å. –í–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–ª–∞–≥—É –æ—Ç –ø—Ä–∏—Ä–æ–¥—ã. üåßÔ∏è",
                "–ü–æ—Å–ª–µ –¥–æ–∂–¥—è —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–µ –∑–∞—Å—Ç–æ—è–ª–∏—Å—å –≤ –≤–æ–¥–µ. üåø",
                "–í–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –±—É–¥—É—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–ª–∞–≥—É –æ—Ç –ø—Ä–∏—Ä–æ–¥—ã. üåßÔ∏è",
                "–ü–æ—Å–ª–µ –¥–æ–∂–¥—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á–≤—É –Ω–∞ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö. üåø"
        };

        String[] clearAdvice = {
                "–°–µ–≥–æ–¥–Ω—è —è—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ —Å–≤–µ—Ç—É, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—Ç–∞. üåû",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —É–¥–æ–±—Ä–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π. üåø",
                "–Ø—Å–Ω—ã–π –¥–µ–Ω—å - –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Å–∞–¥—É. üå≥",
                "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π. üåø",
                "–í–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–¥—ã —è—Å–Ω–æ–º—É –¥–Ω—é –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É —Å–≤–µ—Ç—É. üåû"
        };

        String[] cloudAdvice = {
                "–°–µ–≥–æ–¥–Ω—è –æ–±–ª–∞—á–Ω–æ. –í–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω—É–∂–¥–∞—Ç—å—Å—è –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π. üå•Ô∏è",
                "–û–±–ª–∞—á–Ω—ã–π –¥–µ–Ω—å - –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π. üíß",
                "–í–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –æ–±–ª–∞—á–Ω—ã–º –¥–Ω–µ–º, –Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∏—Ö —Å–≤–µ—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º. üåø",
                "–û–±–ª–∞—á–Ω—ã–π –¥–µ–Ω—å - –≤—Ä–µ–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Ç–∫–∏ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π. üå±",
                "–°–µ–≥–æ–¥–Ω—è –æ–±–ª–∞—á–Ω–æ. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–ª–∞–∂–Ω–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞ –≤–æ–∫—Ä—É–≥ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π. üíß"
        };

        String[] defaultAdvice = {
                "–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–¥–µ–ª–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤–∞—à–∏–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ. üåø",
                "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å –≤–∞—à–∏–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –≤—ã—è—Å–Ω–∏—Ç—å, —á—Ç–æ –∏–º –Ω—É–∂–Ω–æ —Å–µ–≥–æ–¥–Ω—è. üå±",
                "–ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–≥–æ–¥—ã, –≤–∞—à–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∏ —É—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ. üåø",
                "–°–µ–≥–æ–¥–Ω—è - –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–∫—Ä–∞—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞ —Å –ø–æ–º–æ—â—å—é —Ä–∞—Å—Ç–µ–Ω–∏–π. –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ. üå±",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–∫—Ä–æ–∫–ª–∏–º–∞—Ç–∞ –≤–æ–∫—Ä—É–≥ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. üåø"
        };

        String advice;
        if (temperature > 25) {
            advice = hotAdvice[(int) (Math.random() * hotAdvice.length)];
        } else if (weatherDescription.contains("rain")) {
            advice = rainAdvice[(int) (Math.random() * rainAdvice.length)];
        } else if (weatherDescription.contains("clear")) {
            advice = clearAdvice[(int) (Math.random() * clearAdvice.length)];
        } else if (weatherDescription.contains("cloud")) {
            advice = cloudAdvice[(int) (Math.random() * cloudAdvice.length)];
        } else {
            advice = defaultAdvice[(int) (Math.random() * defaultAdvice.length)];
        }
        return advice;
    }

    public void showNotification(Context context, String text) {
        NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel(NOTIFICATION_CHANNEL_ID, "Weather Updates", NotificationManager.IMPORTANCE_HIGH);
            notificationManager.createNotificationChannel(channel);
        }
        Intent intent = new Intent(context, MainActivity.class);
        intent.putExtra("fragment", "Moi_tviti_Fragment");
        intent.setAction(Intent.ACTION_MAIN);
        intent.addCategory(Intent.CATEGORY_LAUNCHER);
        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);


        Notification notification = new NotificationCompat.Builder(context, NOTIFICATION_CHANNEL_ID)
                .setSmallIcon(R.mipmap.ic_notification_round)
                .setContentTitle("üòé –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã üòé")
                .setContentText(text)
                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))
                .setAutoCancel(true)
                .setContentIntent(pendingIntent)
                .build();

        notificationManager.notify(101, notification);
    }
}
